{"version":3,"file":"shim-connect-fallback.api.bundle.js","mappings":"sCAoCAA,eAAeC,EACdC,EACAC,GAEA,IACCC,QAAQC,IAAI,wDAAyDF,SAC/DD,EAAUI,OAAOH,GACvBC,QAAQC,IAAI,2BACb,CAAE,MAAOE,GACRH,QAAQG,MACP,iIACAA,EAEF,CACD,C,iDA3CA,OAAOP,eAAoBG,GAC1B,QAAmBK,IAAfC,OAAOC,IAAmB,CAC7BN,QAAQC,IAAI,yDACZ,MAAMM,EACL,wGACKT,QAAkBU,OAAiCD,GACzDP,QAAQC,IAAI,qCACZD,QAAQC,IAAI,uEACgB,YAAxBQ,SAASC,YACZV,QAAQC,IAAI,iFACZQ,SAASE,iBAAiB,oBAAoBf,gBACvCC,EAAcC,EAAWC,EAAQ,MAGxCC,QAAQC,IAAI,gDACNJ,EAAcC,EAAWC,GAEjC,CACD,C,GCxBIa,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBV,IAAjBW,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,C,MCrBA,eAEA,iBACO,IAAAG,MAAK,CACVC,OAAQf,OACRgB,sBAAuB,CAAEC,SAAU,uBAEpC,EALD,E","sources":["webpack://openfin-web--web-client-api/./client/src/shim-client.ts","webpack://openfin-web--web-client-api/webpack/bootstrap","webpack://openfin-web--web-client-api/./client/src/shim-connect-fallback.ts"],"sourcesContent":["import type { ClientOptions, DefaultAPIContainerShape } from \"./client-shapes\";\n\n/**\n * This function is used to load the OpenFin API shim if the OpenFin API is not available.\n * Takes a set of options to pass to the shim.\n * @param options The options to pass to the shim.\n */\nexport async function init(options: ClientOptions): Promise<void> {\n\tif (window.fin === undefined) {\n\t\tconsole.log(\"Fin is not available. Importing the OpenFin API shim.\");\n\t\tconst url =\n\t\t\t\"https://built-on-openfin.github.io/web-starter/web/v20.0.0/web-client-api/js/web.client.api.bundle.js\";\n\t\tconst webClient = await import(/* webpackIgnore: true */ url);\n\t\tconsole.log(\"OpenFin API shim script imported.\");\n\t\tconsole.log(\"Checking to see if the document is ready before requesting the API.\");\n\t\tif (document.readyState === \"loading\") {\n\t\t\tconsole.log(\"Document is still loading. Waiting for it to be ready using DOMContentLoaded.\");\n\t\t\tdocument.addEventListener(\"DOMContentLoaded\", async () => {\n\t\t\t\tawait initWhenReady(webClient, options);\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log(\"Document is available. Requesting API.\");\n\t\t\tawait initWhenReady(webClient, options);\n\t\t}\n\t}\n}\n\n/**\n * This function is used to load the OpenFin API shim if the OpenFin API is not available.\n * It will be called when we know the document is ready as the core-web requires DOM access\n * and this is a shim that can be loaded by script and reliant on developers to do it when the\n * document is ready (either through defer or script placement/listeners).\n * @param webClient The web client fetched via import.\n * @param webClient.getAPI The function to get the API.\n * @param options The options to pass to the shim.\n */\nasync function initWhenReady(\n\twebClient: { getAPI: (options: ClientOptions) => Promise<DefaultAPIContainerShape> },\n\toptions: ClientOptions\n): Promise<void> {\n\ttry {\n\t\tconsole.log(\"Attempting to get the API with the following options:\", options);\n\t\tawait webClient.getAPI(options);\n\t\tconsole.log(\"OpenFin API shim applied\");\n\t} catch (error) {\n\t\tconsole.error(\n\t\t\t\"Failed to load the OpenFin API shim. Please note this is an example and you should implement your own approach for production.\",\n\t\t\terror\n\t\t);\n\t}\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import type { DefaultAPIContainerShape } from \"./client-shapes\";\nimport { init } from \"./shim-client\";\n// eslint-disable-next-line @typescript-eslint/no-floating-promises, @typescript-eslint/explicit-function-return-type\n(async () => {\n\tawait init({\n\t\ttarget: window as unknown as DefaultAPIContainerShape,\n\t\trequestConnectOptions: { strategy: \"request-on-failure\" }\n\t});\n})();\n"],"names":["async","initWhenReady","webClient","options","console","log","getAPI","error","undefined","window","fin","url","import","document","readyState","addEventListener","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","init","target","requestConnectOptions","strategy"],"sourceRoot":""}