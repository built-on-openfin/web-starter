{"version":3,"file":"iframe-broker.bundle.js","mappings":";;;;;;;;;;AAAa,6IAA6I,EAAE,cAAc,4BAA4B,yBAAyB,wBAAwB,EAAE,8CAA8C,gCAAgC,IAAI,2BAA2B,SAAS,UAAU,+BAA+B,QAAQ,qBAAqB,uBAAuB,eAAe,wGAAwG,uGAAuG,wCAAwC,iBAAiB,aAAa,GAAG,GAAG,iBAAiB,+BAA+B,gBAAgB,iDAAiD,WAAW,gBAAgB,oGAAoG,oBAAoB,qDAAqD,WAAW,cAAc,wCAAwC,cAAc,2CAA2C,0BAA0B,qDAAqD,qCAAqC,IAAI,gDAAgD,kBAAkB,aAAa,iCAAiC,QAAQ,uBAAuB,wEAAwE,gCAAgC,OAAO,GAAG,OAAO,OAAO,6BAA6B,iCAAiC,QAAQ,kCAAkC,2BAA2B,GAAG,+BAA+B,wBAAwB,8EAA8E,aAAa,GAAG,uBAAuB,UAAU,6BAA6B,kCAAkC,sCAAsC,aAAa,EAAE,cAAc,QAAQ,mBAAmB,qPAAqP,2BAA2B,gDAAgD,oGAAoG,wCAAwC,kEAAkE,mBAAmB,SAAS,iBAAiB,aAAa,mDAAmD,GAAG,wHAAwH,qCAAqC,yIAAyI,MAAM,OAAO,GAAG,4CAA4C,sBAAsB,oCAAoC,WAAW,uFAAuF,SAAS,SAAS,sBAAsB,GAAG,2BAA2B,iFAAiF,WAAW,mBAAmB,IAAI,gBAAgB,SAAS,UAAU,+CAA+C,yBAAyB,wLAAwL,iBAAiB,+EAA+E,mBAAmB,gGAAgG,kBAAkB,MAAM,uMAAuM,aAAa,uCAAuC,8EAA8E,SAAS,gIAAgI,UAAU,GAAG,QAAQ,EAAE,uDAAuD,MAAM,OAAO,oCAAoC,SAAS,qDAAqD,WAAW,KAAK,oDAAoD,iBAAiB,uBAAuB,EAAE,uCAAuC,SAAS,2BAA2B,SAAS,8CAA8C,EAAE,KAAK,2BAA2B,8JAA8J,UAAU,cAAc,SAAS,+DAA+D,iCAAiC,YAAY,WAAW,IAAI,MAAM,kBAAkB,GAAG,uDAAuD,aAAa,sDAAsD,8CAA8C,sBAAsB,6FAA6F,iBAAiB,GAAG,KAAK,SAAS,UAAU,6BAA6B,mDAAmD,iBAAiB,aAAa,2BAA2B,kCAAkC,sEAAsE,0CAA0C,GAAG,SAAS,+BAA+B,aAAa,sDAAsD,qBAAqB,yDAAyD,SAAS,6CAA6C,kBAAkB,yBAAyB,4BAA4B,GAAG,SAAS,wEAAwE,UAAU,GAAG,GAAG,iBAAiB,oBAAoB,CAAC,yBAAyB;;;;;;;;;;;;;ACMhoM,kCASC;AAbD;;;GAGG;AACI,KAAK,UAAU,WAAW;IAChC,OAAO;QACN,QAAQ,EAAE;YACT,eAAe,EAAE,kDAAkD;YACnE,SAAS,EAAE,mDAAmD;YAC9D,UAAU,EAAE,mBAAmB;YAC/B,mBAAmB,EAAE,OAAO;SAC5B;KACD,CAAC;AACH,CAAC;;;;;;;UCfD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;;;ACtBA,gJAA+E;AAC/E,8FAAyC;AAEzC;;;GAGG;AACH,KAAK,UAAU,IAAI;IAClB,MAAM,QAAQ,GAAG,MAAM,0BAAW,GAAE,CAAC;IACrC,OAAO,wBAAoB,EAAC;QAC3B,eAAe,EAAE,QAAQ,CAAC,QAAQ,CAAC,eAAe;KAClD,CAAC,CAAC;AACJ,CAAC;AAED,IAAI,EAAE;KACJ,IAAI,CAAC,GAAG,EAAE;IACV,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;IAC3D,OAAO,IAAI,CAAC;AACb,CAAC,CAAC;KACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","sources":["webpack://openfin-web--web-interop-basic/../../node_modules/@openfin/core-web/out/iframe-broker.js","webpack://openfin-web--web-interop-basic/./client/src/platform/settings.ts","webpack://openfin-web--web-interop-basic/webpack/bootstrap","webpack://openfin-web--web-interop-basic/./client/src/platform/iframe-broker.ts"],"sourcesContent":["\"use strict\";const e=\"web-broker-ports-ready\",t=\"worker-initialize-connection\",i=\"create-fallback-connection\",r=\"request-fallback-connection\",n=e=>`ack-${e}`,o=(...e)=>({log:(...t)=>console.log(`[${(new Date).toISOString()}]`,...(e=>e.map((e=>`[${e}]`)))(e),...t),getLogger:(...t)=>o(...e,...t)}),s=e=>window.top===e,a=(e,t)=>{try{return e.origin===t.origin}catch(e){return!1}},c=\"openfin/web-shared-worker\";class d{static get lockApi(){return navigator.locks}constructor(e){this.name=e,this.releaseCallback=null,d.pending.add(this),this.lockAcquiredPromise=new Promise(((e,t)=>{this.lockReleasedPromise=d.lockApi.request(this.name,(()=>(d.pending.delete(this),e(),new Promise((e=>{d.held.add(this),this.releaseCallback=e}))))).catch((e=>{throw t(e),e}))}))}async acquired(){await this.lockAcquiredPromise}async release(){if(!this.releaseCallback)throw new Error(`Lock ${this.name} not acquired.`);this.releaseCallback(),this.releaseCallback=null,await this.lockReleasedPromise,d.held.delete(this)}async onReleased(e){if(!this.lockReleasedPromise)throw new Error(`Lock ${this.name} not queued.`);return this.lockReleasedPromise.then(e)}autoRelease(){this.acquired().then((()=>this.release()))}static async releaseAll(){const e=Promise.all([...this.pending].map((async e=>{await e.acquired(),await e.release()})));await Promise.all([...this.held].map((async e=>{await e.release()}))),await e}}d.pending=new Set,d.held=new Set;class l{constructor(e=100,t=2){this.pingIntervalMs=e,this.allowedMissedPings=t,this.lockSelf=async e=>{const t=new d((e=>`__OPENFIN__${e.uuid}_${e.name}`)(e));return await t.acquired(),t}}async lockProxiedConnection(e,t){let i=0;t.addEventListener(\"message\",(e=>{\"pong\"===e.data.topic&&i--}));const r=await this.lockSelf(e);let n=setInterval((()=>{i>=this.allowedMissedPings?(r.release(),clearInterval(n)):(i++,t.postMessage({topic:\"ping\"}))}),this.pingIntervalMs);t.start()}registerProxiedConnection(e){e.addEventListener(\"message\",(t=>{\"ping\"===t.data.topic&&e.postMessage({topic:\"pong\"})})),e.start()}}class h{constructor(e,t,o){this.workerUrl=e,this.iframeWindow=t,this.forceWorker=o,this.identityDisconnectionController=new l,this.isSharedWorkerSupported=()=>!this.forceWorker&&!!window.SharedWorker,this.state=\"ready\",this.establishWorkerConnectionViaWindow=async(e,t)=>{if(a(this.iframeWindow,e)){const o=new MessageChannel,s=new MessageChannel;return this.identityDisconnectionController.registerProxiedConnection(s.port1),new Promise(((a,c)=>{o.port1.addEventListener(\"message\",(e=>{e.data.topic===n(i)&&(e.data.success?a(o.port1):c(e.data.reason))})),o.port1.start();const d={topic:r,payload:{identity:t}};e.postMessage(d,location.origin,[o.port2,s.port2])}))}throw new Error(\"Could not connect via top level browsing context as its origin does not much the web interop broker.\")},this.listenForNestedConnections=e=>{\"top-window\"===this.state&&a(this.iframeWindow,this.iframeWindow.parent)&&this.iframeWindow.parent.addEventListener(\"message\",(async t=>{const{data:n}=t;if(t.origin===location.origin&&n.topic===r){const[r,...o]=t.ports;if(o.length>0&&n.payload?.identity){const[e]=o;await this.identityDisconnectionController.lockProxiedConnection(n.payload.identity,e)}const s={topic:i};e.postMessage(s,[r])}}))},this.initialize=async e=>{if(\"ready\"!==this.state)throw new Error(\"Worker connection already initialized\");return(e=>{const t=i=>!(!(e=>{try{return!e.origin}catch(e){return!0}})(i)&&i.origin===e.origin)||!s(i)&&t(i.parent);return!s(e)&&t(e.parent)})(this.iframeWindow)&&a(this.iframeWindow,this.iframeWindow.top)?this.state=\"partitioned-frame\":s(this.iframeWindow.parent)?this.state=\"top-window\":this.state=\"frame\",this.connect(e)}}async connect(e){if(\"ready\"===this.state)throw new Error(\"Must call initialize before connect\");switch(this.state){case\"partitioned-frame\":return this.establishWorkerConnectionViaWindow(this.iframeWindow.top,e);case\"top-window\":{let t;return t=this.isSharedWorkerSupported()?new SharedWorker(this.workerUrl,c).port:new Worker(this.workerUrl),await this.identityDisconnectionController.lockSelf(e),this.listenForNestedConnections(t),t}case\"frame\":{if(!this.isSharedWorkerSupported())try{return await this.establishWorkerConnectionViaWindow(this.iframeWindow.top,e)}catch(e){throw new Error(`SharedWorker is not supported and an unexpected error occured when trying to connect via fallback mechanism: ${e.message}`,{cause:e})}await this.identityDisconnectionController.lockSelf(e);const{port:t}=new SharedWorker(this.workerUrl,c);return t}default:throw this.state,new Error(`Invalid state: ${this.state}`)}}}const w=o(\"@openfin/core-web/iframe-broker\"),p=()=>{const e=((e,t)=>{const i=new RegExp(`^${t}<(?<meta>.*)>$`).exec(e)?.groups?.meta;if(i)try{return JSON.parse(atob(i))}catch(e){throw new Error(`Failed to decode JSON from ${i}.`)}})(window.name,\"of-broker\");if(!e)throw new Error(\"Invalid or missing identity string in iframe context. Ensure that this iframe is being renderered via the @openfin/core-web library.\");return e};function g(t){const i={topic:n(e),success:!1,reason:t?.reason??\"Connection Rejected\"};window.parent.postMessage(i,\"*\")}exports.init=async i=>{try{const{sharedWorkerUrl:r}=i;await(\"loading\"===document.readyState?new Promise((e=>{const t=()=>{e(),window.removeEventListener(\"DOMContentLoaded\",t)};window.addEventListener(\"DOMContentLoaded\",t)})):Promise.resolve());const o=p(),s=new h(r,window,\"same-site\"!==i.experimental?.crossTab),a=await s.initialize(o);w.log(`Loading ${r} in ${s.state} mode...`);const c=await(async(i,r,o)=>{const s=new MessageChannel,a=new MessageChannel,c={topic:t,payload:{identity:o}};await new Promise(((e,i)=>{r.addEventListener(\"message\",(r=>{r.data.topic===n(t)&&(r.data.success?e():i(new Error(r.data.reason)))})),r.start?.(),r.postMessage(c,[a.port2])}));const d={topic:n(e),success:!0,payload:{identity:o}};return i.postMessage(d,\"*\",[s.port2,a.port1]),s.port1})(window.parent,a,o);c.start(),a.start?.(),w.log(`Port transfer complete in ${s.state} mode. Connection established with identity ${JSON.stringify(o)}. SharedWorker support=${s.isSharedWorkerSupported()}`)}catch(e){const t=new Error(`An unexpected error occured during initialization. ${e.message}`);g({reason:t.message}),console.error(t)}},exports.rejectConnections=g;\n","import type { Settings } from \"../shapes/setting-shapes\";\n\n/**\n * Fetches the settings for the application.\n * @returns The settings for the application.\n */\nexport async function getSettings(): Promise<Settings> {\n\treturn {\n\t\tplatform: {\n\t\t\tsharedWorkerUrl: \"http://localhost:6060/js/shared-worker.bundle.js\",\n\t\t\tbrokerUrl: \"http://localhost:6060/platform/iframe-broker.html\",\n\t\t\tproviderId: \"web-interop-basic\",\n\t\t\tdefaultContextGroup: \"green\"\n\t\t}\n\t};\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { init as initBrokerConnection } from \"@openfin/core-web/iframe-broker\";\nimport { getSettings } from \"./settings\";\n\n/**\n * Initializes the OpenFin Web Broker connection.\n * @returns A promise that resolves when the connection is established.\n */\nasync function init(): Promise<void> {\n\tconst settings = await getSettings();\n\treturn initBrokerConnection({\n\t\tsharedWorkerUrl: settings.platform.sharedWorkerUrl\n\t});\n}\n\ninit()\n\t.then(() => {\n\t\tconsole.log(\"Connected to the OpenFin IFrame Web Broker.\");\n\t\treturn true;\n\t})\n\t.catch((err) => console.error(err));\n"],"names":[],"sourceRoot":""}